# YAML spec:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'

pr:
- master

variables:
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    Trigger: '$(SourceBranchName)'
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    Trigger: 'PR #$(System.PullRequest.PullRequestNumber)'
  FileSystemRepository: 'FileSystem'
  PackageDownloadPath: '$(Build.ArtifactStagingDirectory)'
  ModuleArtifactName: 'PSWordCloud'
  NupkgArtifactName: 'PSWordCloud.nupkg'


name: '$(BuildID)-$(Date:yyyy-MM-dd)$(Rev:.r) $(TeamProject) (${{ variables.Trigger }})'

stages:
- stage: UploadChangelog
  displayName: 'Upload Changelog'
  dependsOn: []
  condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/master')

  jobs:
  - job: GenerateChangelog
    displayName: "Generate Changelog"

    pool:
      vmImage: ubuntu-latest

    variables:
      FilePath: '$(System.DefaultWorkingDirectory)/Changelog.md'

    steps:
    - task: PowerShell@2
      displayName: 'Create Changelog'
      inputs:
        targetType: 'filepath'
        filePath: './build/New-Changelog.ps1'
        arguments: -Path '$(FilePath)' -ApiKey $(GithubApiKey) -Verbose

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Changelog'
      inputs:
        path: '$(FilePath)'
        artifact: Changelog

- stage: Build
  displayName: 'Build PSWordCloud'
  dependsOn: []

  variables:
    FileSystemDeploymentPath: '$(System.DefaultWorkingDirectory)/build/FileSystem'
    BuiltModulePath: '$(System.DefaultWorkingDirectory)/build/PSWordCloud'

  jobs:
  - job: BuildModule
    displayName: 'Build and Collate Module'

    pool:
      vmImage: windows-latest

    steps:
    - template: templates/environment-setup.yml

    - task: PowerShell@2
      displayName: 'Stage PSWordCloud Module'

      inputs:
        targetType: 'filePath'
        filePath: './build/Build-Module.ps1'

        errorActionPreference: 'stop'
        failOnStdErr: true
        pwsh: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Built Module Artifact'
      inputs:
        path: '$(BuiltModulePath)'
        artifact: '$(ModuleArtifactName)'

    - template: ./templates/register-local-repo.yml
      parameters:
        repositoryPath: '$(FileSystemDeploymentPath)'

    - task: PowerShell@2
      displayName: 'Create Module Nupkg'
      inputs:
        targetType: 'inline'
        script: |
          & './build/Publish-Module.ps1' -Key 'filesystem' -Path '$(FileSystemDeploymentPath)' -OutputDirectory '$(FileSystemDeploymentPath)' -ModulePath '$(BuiltModulePath)'

        errorActionPreference: 'stop'
        failOnStderr: true
        pwsh: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Nupkg Artifact'
      inputs:
        path: '$(NupkgPath)'
        artifact: '$(NupkgArtifactName)'

- stage: LinuxTests
  displayName: 'Linux'
  dependsOn:
  - Build

  # DISABLED: Linux Runner does not have PS7 installed currently.
  condition: false

  jobs:
  - job: Linux
    displayName: 'Pester Tests'

    pool:
      vmImage: ubuntu-latest

    steps:
    - template: templates/environment-setup.yml

    - template: templates/install-built-module.yml
      parameters:
        repositoryPath: '$(PackageDownloadPath)'
        repositoryName: '$(FileSystemRepository)'
        artifactName: '$(NupkgArtifactName)'

    - template: templates/test-steps.yml

- stage: WindowsTests
  displayName: 'Windows'
  dependsOn:
  - Build

  jobs:
  - job: Windows
    displayName: 'Pester Tests'

    pool:
      vmImage: windows-latest

    steps:
    - template: templates/environment-setup.yml

    - template: templates/install-built-module.yml
      parameters:
        repositoryPath: '$(PackageDownloadPath)'
        repositoryName: '$(FileSystemRepository)'
        artifactName: '$(NupkgArtifactName)'

    - template: templates/test-steps.yml

- stage: MacOSTests
  displayName: 'MacOS'
  dependsOn:
  - Build

  jobs:
  - job: MacOS
    displayName: 'Pester Tests'

    pool:
      vmImage: macOS-latest

    steps:
    - template: templates/environment-setup.yml

    - template: templates/install-built-module.yml
      parameters:
        repositoryPath: '$(PackageDownloadPath)'
        repositoryName: '$(FileSystemRepository)'
        artifactName: '$(NupkgArtifactName)'

    - template: templates/test-steps.yml

- stage: PublishModule
  displayName: 'Publish Module'
  dependsOn:
    - LinuxTests
    - WindowsTests
    - MacOSTests
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  variables:
    TagName: ''

  jobs:
  - deployment: PublishToGallery
    displayName: 'PowerShell Gallery'
    environment:
      name: 'pskoans-releases'

    pool:
      vmImage: ubuntu-latest

    variables:
      GalleryDeploymentPath: '$(System.DefaultWorkingDirectory)/build/PSGallery'

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - template: templates/environment-setup.yml

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Built Module Artifact'
            inputs:
              artifact: '$(ModuleArtifactName)'
              path: '$(BuiltModulePath)'

          - task: PowerShell@2
            displayName: 'Publish Module to PSGallery'

            inputs:
              targetType: 'filePath'
              arguments: -Key $(PSApiKey) -Path '$(GalleryDeploymentPath)'
              filePath: './build/Publish.ps1'

              errorActionPreference: 'stop'
              failOnStderr: true
              pwsh: true

  - job: PublishAssets
    displayName: 'Publish Assets to Github'

    pool:
      vmImage: ubuntu-latest

    steps:
    - task: PowerShell@2
      displayName: 'Set Release Tag Name'

      inputs:
        targetType: 'inline'
        script: |
          $tagName = ("$(Build.SourceBranch)" -replace '^/refs/tags/').Trim()

          Write-Host "##vso[task.setvariable variable=TagName]$tagname"

        errorActionPreference: 'stop'
        failOnStderr: true
        pwsh: true

    - task: DownloadPipelineArtifact@2
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'

    - task: GitHubRelease@0
      inputs:
        gitHubConnection: github.com_vexx32
        repositoryName: '$(Build.Repository.Name)'
        action: 'edit' # Options: create, edit, delete
        tag: '$(TagName)' # Required when action == Edit || Action == Delete || TagSource == Manual
        assets: '$(Build.ArtifactStagingDirectory)/**' # Optional
        assetUploadMode: 'replace' # Optional. Options: delete, replace
